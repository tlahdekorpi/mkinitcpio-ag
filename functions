#!/bin/bash
parseopts() {
	local opt optarg i shortopts=$1
	local -a longopts unused_argv

	shift
	while [[ $1 && $1 != '--' ]]; do
		longopts+=("$1")
		shift
	done
	shift

	longoptmatch() {
		local o
		local -a longmatch

		for o in "${longopts[@]}"; do
			if [[ ${o%:} = "$1" ]]; then
				longmatch=("$o")
				break
			fi
			[[ ${o%:} = "$1"* ]] && longmatch+=("$o")
		done

		case ${#longmatch[*]} in
		1) # success, override with opt and return arg req (0 == none, 1 == required)
			opt=${longmatch%:}
			if [[ $longmatch = *: ]]; then
			    return 1
			else
			    return 0
			fi
			;;

		0) # fail, no match found
			return 255
			;;

		*) # fail, ambiguous match
			printf "%s: option '%s' is ambiguous; possibilities:%s\n" "${0##*/}" \
			    "--$1" "$(printf " '%s'" "${longmatch[@]%:}")"
			return 254
			;;
		esac
	}

	while (( $# )); do
		case $1 in
		--) # explicit end of options
			shift
			break
			;;
		-[!-]*) # short option
			for (( i = 1; i < ${#1}; i++ )); do
			opt=${1:i:1}

			# option doesn't exist
			if [[ $shortopts != *$opt* ]]; then
				printf "%s: invalid option -- '%s'\n" "${0##*/}" "$opt"
				OPTRET=(--)
				return 1
			fi

			OPTRET+=("-$opt")
			# option requires optarg
			if [[ $shortopts = *$opt:* ]]; then
				# if we're not at the end of the option chunk, the rest is the optarg
				if (( i < ${#1} - 1 )); then
					OPTRET+=("${1:i+1}")
					break
				# if we're at the end, grab the the next positional, if it exists
				elif (( i == ${#1} - 1 )) && [[ $2 ]]; then
					OPTRET+=("$2")
					shift
					break
				# parse failure
				else
					printf "%s: option '%s' requires an argument\n" "${0##*/}" "-$opt"
					OPTRET=(--)
					return 1
				fi
			fi
			done
			;;
		--?*=*|--?*) # long option
			IFS='=' read -r opt optarg <<< "${1#--}"
			longoptmatch "$opt"
			case $? in
			0)
				if [[ $optarg ]]; then
					printf "%s: option '--%s' doesn't allow an argument\n" "${0##*/}" "$opt"
					OPTRET=(--)
					return 1
				else
					OPTRET+=("--$opt")
				fi
				;;
			1)
				# --longopt=optarg
				if [[ $optarg ]]; then
					OPTRET+=("--$opt" "$optarg")
				# --longopt optarg
				elif [[ $2 ]]; then
					OPTRET+=("--$opt" "$2" )
					shift
				else
					printf "%s: option '--%s' requires an argument\n" "${0##*/}" "$opt"
					OPTRET=(--)
					return 1
				fi
				;;
			254)
				# ambiguous option -- error was reported for us by longoptmatch()
				OPTRET=(--)
				return 1
				;;
			255)
				# parse failure
				printf "%s: unrecognized option '%s'\n" "${0##*/}" "--$opt"
				OPTRET=(--)
				return 1
				;;
			esac
			;;
		*) # non-option arg encountered, add it as a parameter
			unused_argv+=("$1")
			;;
		esac
		shift
	done

	# add end-of-opt terminator and any leftover positional parameters
	OPTRET+=('--' "${unused_argv[@]}" "$@")
	unset longoptmatch

	return 0
}

kver() {
	# this is intentionally very loose. only ensure that we're
	# dealing with some sort of string that starts with something
	# resembling dotted decimal notation. remember that there's no
	# requirement for CONFIG_LOCALVERSION to be set.
	local kver re='^[[:digit:]]+(\.[[:digit:]]+)+'

	# scrape the version out of the kernel image. locate the offset
	# to the version string by reading 2 bytes out of image at at
	# address 0x20E. this leads us to a string of, at most, 128 bytes.
	# read the first word from this string as the kernel version.
	local offset=$(hexdump -s 526 -n 2 -e '"%0d"' "$1")
	[[ $offset = +([0-9]) ]] || return 1

	read kver _ < \
		<(dd if="$1" bs=1 count=127 skip=$(( offset + 0x200 )) 2>/dev/null)

	[[ $kver =~ $re ]] || return 1

	printf '%s' "$kver"
}

debug() {
	(( ! _optdebug )) || printf "debug: $1\n" "${@:2}" >&2
}

msg() {
	(( ! _optquiet )) || printf "$1\n" "${@:2}" >&2
}

msgq() {
	printf "$1\n" "${@:2}" >&2
}

warning() {
	printf "warning: $1\n" "${@:2}" >&2
}

error() {
	printf "error: $1\n" "${@:2}" >&2
	return 1
}

die() {
	error "$@"
	cleanup 1
}

# in_array searches ${@:2} for $1, returns true if found.
in_array() {
	local needle=$1; shift
	local item

	for item in "$@"; do
		[[ $item = $needle ]] && return 0
	done
	return 1
}

# funcgrep returns a list of all functions matching $1 from a file $2
funcgrep() {
	awk -v funcmatch="$1" '
		/^[[:space:]]*[[:alnum:]_]+[[:space:]]*\([[:space:]]*\)/ {
			match($1, funcmatch)
			print substr($1, RSTART, RLENGTH)
	}' "$2"
}

modprobe() {
	command modprobe -d "$_optmoduleroot" -S "$kernel" "$@"
}

add_autodetect() {
	local mod
	while read -r mod; do _autodetect_cache["$mod"]=1; done
}

# auto_modules performs auto detection of modules via sysfs.
auto_modules() {
	if [[ ! -d /sys/devices ]]; then
		error '/sys does not appear to be mounted. Unable to use autodetection'
		return 1
	fi

	add_autodetect < <(
		find /sys/devices -name uevent -exec awk -F= '
			$1 == "MODALIAS" && $2 {
				gsub(/-/, "_", $2)
				printf "%s\0", $2
			}
		' {} + | xargs -0 modprobe -aqR -d "$_optmoduleroot" -S "$kernel"
	)
}

# all_modules returns a list of modules from patterns $@.
# Use '-f' to filter found modules.
all_modules() {
	local -i count
	local -a filter
	local mod OPTIND OPTARG

	local am="$_d_workdir"/all.modules

	while getopts ':f:' flag; do
		case $flag in f) filter+=("$OPTARG") ;; esac
	done
	shift $(( OPTIND - 1 ))

	if [[ ! -f "$am" ]]; then
		find "$_d_kmoduledir" \
			-type f -name '*.ko*' -print0 2>/dev/null > "$am"
	fi

	while read -r -d '' mod; do
		(( count++ ))

		for f in "${filter[@]}"; do
			[[ $mod =~ $f ]] && continue 2
		done

		mod=${mod##*/}
		mod="${mod%.ko*}"
		printf '%s\n' "${mod//-/_}"
	done < <(grep -EZz "$@" "$am")

	(( count ))
}

add_mod() {
	local mod
	while read -r mod; do add_module "$mod"; done
}

# add_all_modules adds all modules $@ found by all_modules to the image.
add_all_modules() { add_mod < <(all_modules "$@"); }

# add_checked_modules is the same as add_all_modules except the modules are
# filtered to autodetected modules, if there are no autodetected modules
# this is equivalent to add_all_modules.
add_checked_modules() {
	add_mod < <(
		if (( ${#_autodetect_cache[*]} )); then
			all_modules "$@" | grep -xFf \
				<(printf '%s\n' "${!_autodetect_cache[@]}")
		else
			all_modules "$@"
		fi
	)
}

# add_firmware adds all firmware $@ found in _d_firmware to the image.
add_firmware() {
	local fw p

	[[ ! $kernel ]] && return

	for fw in "$@"; do
		for p in "$_d_firmware"{/updates,}; do
			[[ -f "$p/$fw" ]] || continue
			add "f $p/$fw usr/lib/firmware/$fw"
			continue 2
		done
		warning 'missing firmware: %s' "$fw"
	done
}

add_builtin() {
	local m
	while read -r m; do
		m="${m##*/}"
		m="${m%.ko}"
		m="${m//-/_}"
		_addedmodules["$m"]=2
	done
}

add_builtin_modinfo() {
	local module softdeps field value

	while IFS=':= ' read -r -d '' field value; do
		case "$field" in
		*.firmware)
			_firmware+=("$value")
			;;
		*.alias)
			_addedmodules["${value//-/_}"]=3
			;;
		*.softdep)
			read -ra softdeps <<<"$value"
			for module in "${softdeps[@]}"; do
			[[ $module == *: ]] && continue
			add_module "$module?"
			done
			;;
		*.*)
			module="${field%.*}"
			_addedmodules["${module//-/_}"]=3
			;;
		esac
	done
}

_add_module() {
	local m module softdeps deps field value

	[[ ! $kernel ]] && return

	_add_modules=()

	while IFS=':= ' read -r -d '' field value; do
		case "$field" in
		name)
			debug "module:   %s" "$value"
			;;
		filename)
			debug "filename: %s" "$value"
			[[ "$value" == '(builtin)' ]] && continue
			module=${value##*/} module=${module%.ko*}
			_modpaths["$value"]=1
			_addedmodules["${module//-/_}"]=1
			;;
		alias)
			_addedmodules["${value//-/_}"]=3
			;;
		depends)
			IFS=',' read -r -a deps <<< "$value"
			add_module "${deps[@]}"
			;;
		firmware)
			_firmware+=("$value")
			;;
		softdep)
			read -ra softdeps <<<"$value"
			for module in "${softdeps[@]}"; do
			[[ $module == *: ]] && continue
			add_module "$module?"
			done
			;;
		esac
	done < <(modinfo -b "$_optmoduleroot" -k "$kernel" -0 "${@%\?}" 2>/dev/null)

	for m in "${@//-/_}"; do
		if [[ $m = *\? ]]; then
			continue
		fi

		if (( _addedmodules[$m] )); then
			continue
		fi

		warning "module not found: %s" "$m"
	done

	if (( ! ${#_add_modules[@]} )); then
		return
	fi

	_add_module "${_add_modules[@]}"
}

# add_module adds a kernel modules $@ and all it's dependencies and firmware
# to the image. ?-suffix ignores errors.
add_module() {
	local target mod

	[[ ! $kernel ]] && return 0

	for target; do
		target=${target%.ko*}
		target=${target//-/_}

		mod=${target%\?}

		(( _addmodule[$mod] )) && continue
		_addmodule[$mod]=1

		# handle module quirks
		case $mod in
		fat)
			add_module 'nls_cp437?' 'nls_iso8859-1?'
			;;
		ocfs2)
			add_module 'configfs?'
			;;
		btrfs)
			add_module 'libcrc32c?'
			;;
		f2fs)
			add_module 'crypto-crc32?'
			;;
		ext4)
			add_module 'crypto-crc32c?'
			;;
		esac

		_add_modules+=("$target")
	done

}

addf() {
	if (( $# )); then
		printf "$@" >> "$BUILDARCHIVE"
	else
		cat - >> "$BUILDARCHIVE"
	fi
}

add() {
	if (( $# )); then
		printf '%s\n' "$@" >> "$BUILDARCHIVE"
	else
		cat - >> "$BUILDARCHIVE"
	fi
}

add_full_dir() {
	add "Rr $1 $1 0 0"
}

add_file() {
	(( ! $# )) || add "fr $*"
}

add_files() {
	(( ! $# )) || addf 'fr %s\n' "$@"
}

add_file_abs() {
	(( ! $# )) || add "f $*"
}

# add_runscript adds the runtime script for the calling hook to the image.
add_runscript() {
	[[ $init == systemd* ]] && return

	local hookname="$1"
	local fn

	add "f $PWD/runscript /hooks/$hookname 0755"

	while read -r fn; do
		case $fn in
		run_earlyhook)
			_runhooks['early']+=" $hookname"
			;;
		run_hook)
			_runhooks['hooks']+=" $hookname"
			;;
		run_latehook)
			_runhooks['late']+=" $hookname"
			;;
		run_cleanuphook)
			_runhooks['cleanup']="$hookname ${_runhooks['cleanup']}"
			;;
		esac
	done < <(funcgrep '^run_[[:alnum:]_]+' 'runscript')
}

# add_binary looks up binaries $@ from PATH and adds them to the image.
add_binary() {
	(( ! $# )) || addf 'p %s usr/bin/\n' "$@"
}

# load_config adds all modules, binaries, files and the config into the image,
# and embeds version information for archivegen and mkinitcpio.
load_config() {
	local mod
	local -a mods

	add_module "${MODULES[@]}"
	add_binary "${BINARIES[@]}"
	add_files "${FILES[@]}"

	add <<-?
	c version - - - <<!
	archivegen: $(archivegen -version)
	mkinitcpio: $version
	!
	?

	add  'c buildconfig - - - <<!'
	declare -p HOOKS COMPRESSION MODULES BINARIES FILES | add
	add  '!'

	for mod in "${MODULES[@]%\?}"; do
		# 2 = builtin, 3 = alias
		(( _addedmodules["${mod//-/_}"] == 1 )) && mods+=("$mod")
	done

	if (( ${#mods[*]} )); then
		add  'c usr/lib/modules-load.d/mkinitcpio.conf - - - <<!'
		addf '%s\n' "${mods[@]}"
		add  '!'
	fi

	# /config is only used by the included init.
	case $init in ''|systemd*) return ;; esac

	add <<-?
	c config - - - <<!
	# mkinitcpio.init(5) config
	  EARLYHOOKS='${_runhooks[early]# }'
	       HOOKS='${_runhooks[hooks]# }'
	   LATEHOOKS='${_runhooks[late]# }'
	CLEANUPHOOKS='${_runhooks[cleanup]% }'
	!
	?
}

cd_script_dir() {
	local path script=${1:?}

	for path in "${_d_install[@]}"; do
		if [[ -e "$path/$script" ]]; then
			cd "$path"
			return 0
		fi
	done
	return 1
}

run_build_hook() {
	local hook="$1"
	local head pwd
	local -i i

	if (( $# > 1 )); then
		error 'run_build_hook: too many arguments'
		return 1
	fi

	(( _built_hooks["$hook"] )) && return 0
	_built_hooks["$hook"]=1

	pwd="$PWD"
	if ! cd_script_dir "$hook"; then
		error 'no such hook: %s' "$hook"
		return 1
	fi

	# hooks can be directories containing a build hook, runscript
	# and .archive files which are automatically added to the image.
	if [[ -d "$hook" ]]; then
		cd "$hook"
		set -- build runscript *.archive
	fi

	for x; do
		if [[ ! -f "$x" ]]; then
			continue
		fi

		(( i++ ))
		msg "%s" "${2:+$hook/}$x"

		case "$x" in
		*.archive)
			add < "$x"
			continue
			;;
		runscript)
			add_runscript "$hook"
			continue
			;;
		esac

		read -r -n 9 head < "$x"
		if [[ "$head" == '#!archive' ]]; then
			add < "$x"
			continue
		fi

		unset -f build
		if ! source ./"$x"; then
			cd "$pwd"; return 1
		fi

		if ! declare -f build >/dev/null; then
			error 'build function missing: %s' "$hook"
			cd "$pwd"; return 1
		fi

		if ! build; then
			error 'build function failed: %s' "$hook"
			cd "$pwd"; return 1
		fi
	done

	cd "$pwd"

	if (( ! i )); then
		warning 'empty hook directory: %s' "$hook"
		return 0
	fi

	HOOKS+=("$hook")
}

install_modules() {
	[[ ! $kernel ]] && return

	if (( ! $# )); then
		warning "image does not include any kernel modules!"
		return
	fi

	add 'mr - .*lib/modules/ usr/lib/modules/'
	add "r $_d_kmoduledir/^modules.(.*.bin|devname|softdep)$ - 0 0"
	addf 'f %s\n' "$@"
	add 'mc -'
}

add_udev_rule1() {
	local -a rules

	mapfile -t rules < <(PATH="$_optrootfs"/usr/lib/udev/rules.d type -P "$@")
	if (( ! ${#rules[@]} && $# == 1 )); then
		return 0
	fi
	if (( ! ${#rules[@]} )); then
		error "missing udev rules: %d %s" "${#rules[@]}" "$*"
		return 1
	fi

	add_udev_rule "${rules[0]##*/}"
}

add_udev_rule() {
	(( ! $# )) && return 1

	addf 'fr /usr/lib/udev/rules.d/%s\n' "$@"
	awk -F, -- '
	/^#|^$/ {next}
	{
	for (i=1; i<=NF; i++)
		if ($i ~ "RUN({program}|+)|IMPORT{program}|ENV{REMOVE_CMD}|PROGRAM=") {
			split($i, s, "\"")
			sub(/ .*/, "", s[2])
			if (s[2] !~ /^\$|^$/)
				bin[s[2]]=1
		}
	}
	END {
	for (x in bin) {
		if (x ~ "^(/usr|)/bin/sh$")
			continue
		if (x !~ "^/")
			printf "L /usr/lib/udev/%s\n", x
		else
			printf "L %s\n", x
	}
	}' "${@/#/$_optrootfs/usr/lib/udev/rules.d/}" | add
}

add_systemd_unit1() {
	[[ $init != systemd* ]] && return

	local -a units

	mapfile -t units < <(PATH="$_optrootfs"/usr/lib/systemd/system type -P "$@")
	if (( ! ${#units[@]} && $# == 1 )); then
		return 0
	fi
	if (( ! ${#units[@]} )); then
		error "missing systemd units: %s" "$*"
		return 1
	fi

	add_systemd_unit "${units[0]##*/}"
}

add_systemd_unit() {
	local -a units next reqs
	local req

	[[ $init != systemd* ]] && return
	(( ! $# )) && return

	addf 'rr /usr/lib/systemd/system/.wants$/%s - 0 0\n' "$@"
	addf 'fr /usr/lib/systemd/system/%s\n' "$@"

	units=("${@/#/$_optrootfs/usr/lib/systemd/system/}")
	mapfile -t next < <(
		awk -v archive="$BUILDARCHIVE" -F= -- '
		/^(#|;)/ {next}

		$1 ~ "^Exec.*" && $2 !~ "^-" {
			sub(/ .*/, "", $2)
			sub(/^[!@\-+]{,}/, "", $2)
				bin[$2]=1
		}

		$1 ~ "^(Requires|OnFailure)$" {
			if (split($2, s, " ") > 1)
				for (x in s) dep[s[x]]=1
			else
				dep[$2]=1
		}

		END {
			for (x in dep)
				printf "%s\n", x

			for (x in bin) {
				if (x ~ "^(/usr|)/bin/sh$")
					continue

				if (x == "sh")
					continue

				if (x ~ "^/") {
					printf "L %s\n", x >> archive
					continue
				}

				printf "L /usr/(s|)bin/%s\n", x >> archive
			}
		}
		' "${units[@]}"
	)

	mapfile -t reqs < <(
		shopt -s nullglob
		for unit in "${units[@]}"; do
			printf '%s\n' "$unit.requires"/*
		done
	)

	for req in "${reqs[@]}"; do
		[[ -L "$req" ]] || continue
		next+=("${req##*/}")
		# TODO: remove glob abuse
		addf 'rr %s - 0 0\n' "${req##$_optrootfs}"
	done

	add_systemd_unit "${next[@]}"
}

add_systemd_drop_in() {
	[[ $init != systemd* ]] && return

	addf 'c usr/lib/systemd/system/%s.d/%s.conf - - - <<!\n' "$1" "$2"
	add
	add '!'
}
