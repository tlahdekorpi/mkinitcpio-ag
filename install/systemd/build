#!/bin/bash
strip_quotes() {
	local len=${#1} quotes=$'[\'"]' str=${!1}

	if [[ ${str:0:1} = ${str: -1} && ${str:0:1} = $quotes ]]; then
		printf -v "$1" %s "${str:1:-1}"
	fi
}

add_udev_rule() {
	# Add an udev rules file to the initcpio image. Dependencies on binaries
	# will be discovered and added.
	#   $1: path to rules file (or name of rules file)

	local rules= rule= key= value= binary=

	rules=$(PATH="$_optrootfs"/usr/lib/udev/rules.d type -P "$1")
	if [[ -z $rules ]]; then
		# complain about not found rules
		return 1
	fi

	add_file "$rules"

	while IFS=, read -ra rule; do
		# skip empty lines, comments
		[[ -z $rule || $rule = @(+([[:space:]])|#*) ]] && continue

		for pair in "${rule[@]}"; do
			IFS=' =' read -r key value <<< "$pair"
			case $key in
			RUN@({program}|+)|IMPORT{program}|ENV{REMOVE_CMD})
				strip_quotes 'value'
				# just take the first word as the binary name
				binary=${value%% *}
				[[ ${binary:0:1} == '$' ]] && continue
				if [[ ${binary:0:1} != '/' ]]; then
					binary=$(PATH="$_optrootfs"/usr/lib/udev type -P "$binary")
				fi
				_binaries["${binary##$_optrootfs}"]=1
				;;
			esac
		done
	done < "$rules"
}

add_systemd_unit() {
	# Add a systemd unit file to the initcpio image. Hard dependencies on binaries
	# and other unit files will be discovered and added.
	#   $1: path to rules file (or name of rules file)

	local unit= rule= entry= key= value= binary= dep=

	unit=$(PATH="$_optrootfs"/usr/lib/systemd/system type -P "$1")
	if [[ -z $unit ]]; then
		# complain about not found unit file
		return 1
	fi

	add_file "$unit"

	while IFS='=' read -r key values; do
		read -ra values <<< "$values"

		case $key in
		Requires|OnFailure)
			# only add hard dependencies (not Wants)
			map add_systemd_unit "${values[@]}"
			;;
		Exec*)
			# don't add binaries unless they are required
			if ! [[ ${values[0]:0:1} != '-' ]]; then
				continue
			fi

			binary="${values[0]##+(@|-|+|\!)}"
			if ! [[ "$binary" =~ ^(/usr|)/bin/sh$ ]]; then
				_binaries["$binary"]=1
			fi
			;;
		esac
	done < "$unit"

	# preserve reverse soft dependency
	for dep in "$_optrootfs"/usr/lib/systemd/system/*.wants/${unit##*/}; do
		if [[ -L $dep ]]; then
			add_symlink "$dep"
		fi
	done

	# add hard dependencies
	if [[ -d $unit.requires ]]; then
		for dep in "$unit".requires/*; do
			add_systemd_unit ${dep##*/}
		done
	fi
}

add_systemd_drop_in() {
	addf 'c usr/lib/systemd/system/%s.d/%s.conf - - - <<!\n' "$1" "$2"
	add
	add '!'
}

build() {
	busybox --list | awk '/fsck/{next} {print "l busybox usr/bin/"$1}' | add

	add <<-!
	l usr/{sbin,bin,lib} /
	l bin usr/sbin

	# sd-units check if this exists
	c etc/initrd-release

	# fsck
	l ../proc/self/mounts etc/mtab

	L /usr/sbin/{
		blkid
		busybox
		sulogin
		switch_root
	} usr/bin

	L /usr/bin/{
		mount,umount
		kmod
	}
	l kmod usr/bin/{dep,ins,rm,ls}mod
	l kmod usr/bin/mod{probe,info}

	L /usr/bin/{systemd-tmpfiles,journalctl}

	l /usr/lib/systemd/systemd init

	L /usr/lib/systemd/system-generators/{
		systemd-fstab-generator
		systemd-gpt-auto-generator
		systemd-hibernate-resume-generator
		systemd-debug-generator
	}

	L /usr/lib/systemd/{
		systemd
		systemd-hibernate-resume
		systemd-shutdown
		systemd-sulogin-shell
	}

	l initrd.target usr/lib/systemd/system/default.target
	l reboot.target usr/lib/systemd/system/ctrl-alt-del.target
	!

	local rules=(
		50-udev-default.rules
		60-persistent-storage.rules
		64-btrfs.rules
		80-drivers.rules
		99-systemd.rules
	)
	map add_udev_rule "${rules[@]}"

	local units=(
		debug-shell.service

		kmod-static-nodes.service
		systemd-fsck@.service
		systemd-hibernate-resume@.service
		systemd-journald-audit.socket
		systemd-journald-dev-log.socket
		systemd-journald.service
		systemd-modules-load.service
		systemd-tmpfiles-setup-dev.service
		systemd-udev-trigger.service
		systemd-udevd-control.socket
		systemd-udevd-kernel.socket
		systemd-udevd.service
		systemd-volatile-root.service

		initrd-cleanup.service
		initrd-fs.target
		initrd-parse-etc.service
		initrd-root-device.target
		initrd-root-fs.target
		initrd-switch-root.service
		initrd-switch-root.target
		initrd-udevadm-cleanup-db.service
		initrd.target

		emergency.target
		local-fs-pre.target
		local-fs.target
		paths.target
		reboot.target
		rescue.target
		slices.target
		sockets.target
		swap.target
		timers.target
	)
	map add_systemd_unit "${units[@]}"

	add <<-!
	L /usr/lib64/libnss_files.so.2

	c etc/passwd - - - root:x:0:0:root:/:/usr/bin/sh
	c etc/group  - - - root:x:0:root
	c etc/shadow - - - root::::::::
	!

	add_systemd_drop_in systemd-udevd.service resolve-names <<-!
	[Service]
	ExecStart=
	ExecStart=/usr/lib/systemd/systemd-udevd --resolve-names=never
	!

	add <<-!
	f $PWD/break-generator usr/lib/systemd/system-generators/break-generator 0755
	!
}

help() { cat <<!
This will install a basic systemd setup in your initramfs, and is meant to
replace the 'init', 'usr', 'udev' and 'resume' hooks. Other hooks with runtime
components will need to be ported, and will not work as intended. You also may
wish to still include the 'base' hook (before this hook) to ensure that a
rescue shell exists on your initramfs.
!
}
