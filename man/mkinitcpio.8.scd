mkinitcpio(8)

# NAME

mkinitcpio - create initramfs images

# SYNOPSIS

*mkinitcpio* [OPTIONS...] [FILES...]

# DESCRIPTION

*mkinitcpio* is a *archivegen* config generator for creating linux
initramfs images that allows for easy extension with hooks.

# OPTIONS

*-A, --addhooks=*
	Include additional install hooks, these will be appended to existing hooks.
	The argument should be a comma-separated list.

*-a, --archive*
	Show the generated image in *archivegen* format.

*-b, --base64*
	When used with *--archive* all inlined files (create types) are base64 encoded.

*-c, --config=*
	Alternate *mkinitcpio*(5) config file.

*-d, --debug*
	Debug output.

*-F, --firmware=*
	Alternate firmware search path. Defaults to _/usr/lib/firmware_.

*-f, --force*
	Overwrite already existing files when used with *--generate*.

*-g, --generate=*
	Write the generated image to a file instead of stdout.

*-h, --help*
	Print a short help text for command-line options and usage.

*-H, --hookhelp=*
	Show help for a hook.

*-k, --kernel=*
	Use an alternate kernel for module lookup. It takes a path to a kernel
	image, a specific kernel version in *--moduleroot* or "none".
	In the latter case, no kernel modules or firmware are included to the image.

*-L, --listhooks*
	Show all available hooks.

*-M, --automods*
	Show modules found with "autodetect" hook.

*-n, --concurrent*
	Load ELFs concurrently.

*-N, --nogen*
	Do not generate the final archive.

*-o, --hooks=*
	Only include listed install hooks, the argument should be a comma-separated list.

*-p, --path=*
	Alternate *mkinitcpio*(5) config and install hook search path, if argument has a "+" suffix
	it is prepended to the default path.

*-r, --moduleroot=*
	Alternate system root used by *modprobe*(8) and *modinfo*(8), defaults to _/_.

*-R, --rootfs=*
	Alternate system root.

*-s, --save*
	Save the build directory instead of deleting it on exit.

*-S, --skiphooks=*
	Skip hooks when generating the image, the argument should be a comma-separated list.

*-v, --verbose*
	Verbose output. Print information of the generated hooks and image.

*-V, --version*
	Show *mkinitcpio* and *archivegen* version information.

*-X*
	Pass variables to *archivegen*.

*-z, --compress=*
	Alternate compressor used by *--generate*.

# INSTALL HOOKS

Install hooks are bash scripts which are sourced during mkinitcpio runtime in
order to add modules, binaries, and other files to the image. A variety of
functions exist to facilitate this.

*add_module* _modules_
	Adds kernel _modules_ to the image. Dependencies and firmware are derived
	and added automatically.

*add_binary* _binaries_
	Adds _binaries_ to the image. The arguments need not be an absolute
	paths and, if needed, a lookup will be performed.
	If the binary is a ELF binary, dependencies will be automatically added.

*add_file* _source_ [ _destination_ ] [ _mode_ ] [ _uid_ ] [ _gid_ ]
	Adds a file from _source_ to the image. Optionally, a destination within the image
	as well as a file mode, uid and gid can be specified.

*add_file_abs*
	Similar to *add_file*, except the file won't be prefixed with *--rootfs*.

*add_full_dir* _directory_
	Recursively adds a _directory_ to the image. This function will not
	follow symlinks, nor will it add the targets of symlinks.

*add_all_modules* [ _-f filter_ ] _pattern_
	Adds modules to the image, without regard for the autodetect whitelist. _pattern_
	should be a subdirectory within the kernel tree describing a subset of modules to
	be included. Further refinement can be provided via the -f flag with an extended
	regular expression.

*add_checked_modules*
	Similar to *add_all_modules* with the constraint that only modules matching the
	whitelist generated by the "autodetect" hook will be added to the image.
	When used without autodetect, this function is identical to *add_all_modules*.

# FILES

_/etc/mkinitcpio/config_, _/usr/lib/mkinitcpio/config_
	Default mkinitcpio(5) configuration files.

_/etc/mkinitcpio/install_, _/usr/lib/mkinitcpio/install_
	Default search paths for install hooks.

# EXAMPLES

*mkinitcpio*
	Generate image and write it to stdout if it is not a terminal, use -g
	to compress and write to a specific file.

*mkinitcpio -g /boot/initramfs-linux.img -k /boot/vmlinuz-linux*
	Write image for the kernel at /boot/vmlinuz-linux to /boot/initramfs-linux.img.

# SEE ALSO

*mkinitcpio*(5), *initrd*(4), *bootparam*(7)
